1. Задание значений функции   в виде последовательности прямоугольных импульсов

>> A=1; % амплитуда импульса
>> Q=2; % скважность 
>> tau=pi; % длительность импульса
>> Tu=Q*tau; % период следования импульсов
>> T=Tu/200; %  период дискретизации
>> tk = 0:T:Tu; % задаем ВС
>> xk = A*0.5*impulse(tau,Tu,tk-Tu/4)+0.5;
>> w0 = 2*pi/Tu;
>> t=linspace(0,tk(end),5000);
>> y = A*0.5*impulse(tau,Tu,t-Tu/4)+0.5;


2. Вычисление комплексных коэффициентов ряда Фурье 
>>  M = [3 10 100]; % задание числа членов 
                    % усеченного ряда Фурье
>>  c0 = 0.5; % нулевой член ряда
>>  for m=1:length(M)
    x = c0*ones(1,length(t)); 
    for n=1:M(m), % вычисление коэффициентов
        cn = - 1i*(exp(-i*0.5*pi*n)-…
               exp(-i*3/2*pi*n))/(2*pi*n);
        c_n = conj(cn); 
        x = x + cn*exp(1i*n*w0*t) +…
            c_n*exp(-1i*n*w0*t); 
    end
    z1(m,:)=x;
 end

3. Вычисление значений интерполяционного тригонометрического полинома 

>> z2=trigonometric_interp(tk,xk,t);

4. Построение временной диаграммы последовательности прямоугольных импульсов на одном периоде и усеченного ряда Фурье

>> figure('color','w'),
>> plot(t,z1,t,z2)
>> xlim([0 tk(end)])
>> ylim([-0.2 1.2])
>> grid on
>> legend('M=3','M=10','M=100','Полином')

 
5. Построение разности между точными значениями функции   и значениями усеченного ряда Фурье (рис. 3.23)

>> figure, plot(t,abs(y-z1(end,:)))


6. Построение разности между точными значениями функции   и значениями интерполяционного тригонометрического полинома (рис. 3.24)

>> figure, plot(t,abs(y-z2))


7. Оценка погрешности приближения
>> RMSE_1=std(y-z1(end,:)) % вычисленеи RMSE 
                           % усеченного ряда Фурье
>> RMSE_2=std(y-z2) % вычисленеи RMSE
                    % тригонометрического полинома



8. Оценка максимальной величины отклонения усеченного ряда Фурье и интерполяционного тригонометрического полинома от функции (3.110)

>> r=find(y==1);
>> E(1,1)=max(z1(1,r)-y(r));
>> E(2,1)=max(z1(2,r)-y(r));
>> E(3,1)=max(z1(3,r)-y(r));
>> E(4,1)=max(z2(r)-y(r));
